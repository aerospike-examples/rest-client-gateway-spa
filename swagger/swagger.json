{
    "swagger": "2.0",
    "info": {
        "description": "Api Documentation",
        "version": "1.0",
        "title": "Api Documentation",
        "termsOfService": "urn:tos",
        "contact": {},
        "license": { "name": "Apache 2.0", "url": "http://www.apache.org/licenses/LICENSE-2.0" }
    },
    "host": "localhost:8080",
    "basePath": "/",
    "tags": [
        { "name": "Admin Operations", "description": "Manage users and privileges." },
        {
            "name": "Batch Read Operations",
            "description": "Retrieve multiple records from the server."
        },
        {
            "name": "Cluster information operations",
            "description": "Retrieve basic information about the Aerospike cluster."
        },
        {
            "name": "Info Operations",
            "description": "Send info commands to nodes in the Aerospike cluster."
        },
        {
            "name": "Key Value Operations",
            "description": "Perform simple operations on a single record."
        },
        {
            "name": "Operate operations",
            "description": "Perform multiple operations atomically on a single record."
        },
        {
            "name": "Secondary Index methods",
            "description": "Query and manipulate secondary indices."
        },
        { "name": "Truncate Operations", "description": "Remove multiple records from the server." }
    ],
    "paths": {
        "/v1/cluster": {
            "get": {
                "security": [{ "jwt": [] }],
                "tags": ["Cluster information operations"],
                "summary": "Return an object containing information about the Aerospike cluster.",
                "operationId": "getClusterInfo",
                "produces": ["application/json", "application/msgpack"],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": { "$ref": "#/definitions/clusterInformation" }
                    },
                    "500": {
                        "description": "The Rest Client encountered an error processing the request",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    }
                },
                "deprecated": false
            }
        },
        "/v1/kvs/{namespace}/{key}": {
            "get": {
                "security": [{ "jwt": [] }],
                "tags": ["Key Value Operations"],
                "summary": "Return the metadata and bins for a record.",
                "operationId": "getRecordNamespaceKey",
                "produces": ["application/json", "application/msgpack"],
                "parameters": [
                    {
                        "name": "bins",
                        "in": "query",
                        "description": "Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned.",
                        "required": false,
                        "type": "array",
                        "items": { "type": "string" },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "consistencyLevel",
                        "in": "query",
                        "description": "How replicas should be consulted in a read operation to provide the desired consistency guarantee.",
                        "required": false,
                        "type": "string",
                        "default": "CONSISTENCY_ONE",
                        "enum": ["CONSISTENCY_ONE", "CONSISTENCY_ALL"]
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Userkey for the record.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "keytype",
                        "in": "query",
                        "description": "The Type of the userKey.",
                        "required": false,
                        "type": "string",
                        "default": "STRING",
                        "enum": ["STRING", "INTEGER", "BYTES", "DIGEST"]
                    },
                    {
                        "name": "linearizeRead",
                        "in": "query",
                        "description": "Force reads to be linearized for server namespaces that support strong consistency mode.",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-example": false
                    },
                    {
                        "name": "namespace",
                        "in": "path",
                        "description": "Namespace for the record; equivalent to database name.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "replica",
                        "in": "query",
                        "description": "Replica algorithm used to determine the target node for a single record command.",
                        "required": false,
                        "type": "string",
                        "default": "SEQUENCE",
                        "enum": ["MASTER", "MASTER_PROLES", "SEQUENCE", "RANDOM"]
                    },
                    {
                        "name": "sendKey",
                        "in": "query",
                        "description": "Send user defined key in addition to hash digest on both reads and writes.",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-example": false
                    }
                ],
                "responses": {
                    "200": { "description": "OK", "schema": { "$ref": "#/definitions/Record" } },
                    "400": {
                        "description": "Invalid parameters or request",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "403": {
                        "description": "Not authorized to access the resource",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "404": {
                        "description": "Record not found.",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "500": {
                        "description": "The Rest Client encountered an error processing the request",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    }
                },
                "deprecated": false
            },
            "head": {
                "security": [{ "jwt": [] }],
                "tags": ["Key Value Operations"],
                "summary": "Check if a record exists",
                "operationId": "recordExistsNamespaceKey",
                "consumes": ["application/json"],
                "produces": ["application/json", "application/msgpack"],
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Userkey for the record.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "keytype",
                        "in": "query",
                        "description": "The Type of the userKey.",
                        "required": false,
                        "type": "string",
                        "default": "STRING",
                        "allowEmptyValue": false,
                        "enum": ["STRING", "INTEGER", "BYTES", "DIGEST"]
                    },
                    {
                        "name": "namespace",
                        "in": "path",
                        "description": "Namespace for the record; equivalent to database name.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": { "description": "OK" },
                    "404": { "description": "Record does not exist." },
                    "500": {
                        "description": "The Rest Client encountered an error processing the request",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    }
                },
                "deprecated": false
            },
            "post": {
                "security": [{ "jwt": [] }],
                "tags": ["Key Value Operations"],
                "summary": "Create a new record with the provided bins into the record.",
                "operationId": "createRecordNamespaceKey",
                "consumes": ["application/json", "application/msgpack"],
                "produces": ["application/json", "application/msgpack"],
                "parameters": [
                    {
                        "in": "body",
                        "name": "bins",
                        "description": "Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack\nexample: {\"bin1\":5, \"bin2\":\"hello\", \"bin3\": [1,2,3], \"bin4\": {\"one\": 1}}",
                        "required": true,
                        "schema": { "type": "object" }
                    },
                    {
                        "name": "commitLevel",
                        "in": "query",
                        "description": "Desired consistency guarantee when committing a transaction on the server.",
                        "required": false,
                        "type": "string",
                        "default": "COMMIT_ALL",
                        "enum": ["COMMIT_ALL", "COMMIT_MASTER"]
                    },
                    {
                        "name": "consistencyLevel",
                        "in": "query",
                        "description": "How replicas should be consulted in a read operation to provide the desired consistency guarantee.",
                        "required": false,
                        "type": "string",
                        "default": "CONSISTENCY_ONE",
                        "enum": ["CONSISTENCY_ONE", "CONSISTENCY_ALL"]
                    },
                    {
                        "name": "durableDelete",
                        "in": "query",
                        "description": "If the transaction results in a record deletion, leave a tombstone for the record.",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-example": false
                    },
                    {
                        "name": "expiration",
                        "in": "query",
                        "description": "Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "generation",
                        "in": "query",
                        "description": "Expected generation. Generation is the number of times a record has been modified (including creation) on the server.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "generationPolicy",
                        "in": "query",
                        "description": "Qualify how to handle record writes based on record generation.",
                        "required": false,
                        "type": "string",
                        "default": "NONE",
                        "enum": ["NONE", "EXPECT_GEN_EQUAL", "EXPECT_GEN_GT"]
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Userkey for the record.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "keytype",
                        "in": "query",
                        "description": "The Type of the userKey.",
                        "required": false,
                        "type": "string",
                        "default": "STRING",
                        "enum": ["STRING", "INTEGER", "BYTES", "DIGEST"]
                    },
                    {
                        "name": "linearizeRead",
                        "in": "query",
                        "description": "Force reads to be linearized for server namespaces that support strong consistency mode.",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-example": false
                    },
                    {
                        "name": "namespace",
                        "in": "path",
                        "description": "Namespace for the record; equivalent to database name.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "recordExistsAction",
                        "in": "query",
                        "description": "How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods.",
                        "required": false,
                        "type": "string",
                        "enum": ["UPDATE", "UPDATE_ONLY", "REPLACE", "REPLACE_ONLY", "CREATE_ONLY"]
                    },
                    {
                        "name": "replica",
                        "in": "query",
                        "description": "Replica algorithm used to determine the target node for a single record command.",
                        "required": false,
                        "type": "string",
                        "default": "SEQUENCE",
                        "enum": ["MASTER", "MASTER_PROLES", "SEQUENCE", "RANDOM"]
                    },
                    {
                        "name": "sendKey",
                        "in": "query",
                        "description": "Send user defined key in addition to hash digest on both reads and writes.",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-example": false
                    }
                ],
                "responses": {
                    "201": { "description": "Created" },
                    "400": {
                        "description": "Invalid parameters or request",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "403": {
                        "description": "Not authorized to access the resource",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "404": {
                        "description": "Namespace does not exist",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "409": {
                        "description": "Record Already exists",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "500": {
                        "description": "The Rest Client encountered an error processing the request",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    }
                },
                "deprecated": false
            },
            "put": {
                "security": [{ "jwt": [] }],
                "tags": ["Key Value Operations"],
                "summary": "Replace the bins of the specified record.",
                "operationId": "replaceRecordNamespaceKey",
                "consumes": ["application/json", "application/msgpack"],
                "produces": ["application/json", "application/msgpack"],
                "parameters": [
                    {
                        "in": "body",
                        "name": "bins",
                        "description": "Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack\nexample: {\"bin1\":5, \"bin2\":\"hello\", \"bin3\": [1,2,3], \"bin4\": {\"one\": 1}}",
                        "required": true,
                        "schema": { "type": "object" }
                    },
                    {
                        "name": "commitLevel",
                        "in": "query",
                        "description": "Desired consistency guarantee when committing a transaction on the server.",
                        "required": false,
                        "type": "string",
                        "default": "COMMIT_ALL",
                        "enum": ["COMMIT_ALL", "COMMIT_MASTER"]
                    },
                    {
                        "name": "consistencyLevel",
                        "in": "query",
                        "description": "How replicas should be consulted in a read operation to provide the desired consistency guarantee.",
                        "required": false,
                        "type": "string",
                        "default": "CONSISTENCY_ONE",
                        "enum": ["CONSISTENCY_ONE", "CONSISTENCY_ALL"]
                    },
                    {
                        "name": "durableDelete",
                        "in": "query",
                        "description": "If the transaction results in a record deletion, leave a tombstone for the record.",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-example": false
                    },
                    {
                        "name": "expiration",
                        "in": "query",
                        "description": "Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "generation",
                        "in": "query",
                        "description": "Expected generation. Generation is the number of times a record has been modified (including creation) on the server.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "generationPolicy",
                        "in": "query",
                        "description": "Qualify how to handle record writes based on record generation.",
                        "required": false,
                        "type": "string",
                        "default": "NONE",
                        "enum": ["NONE", "EXPECT_GEN_EQUAL", "EXPECT_GEN_GT"]
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Userkey for the record.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "keytype",
                        "in": "query",
                        "description": "The Type of the userKey.",
                        "required": false,
                        "type": "string",
                        "default": "STRING",
                        "enum": ["STRING", "INTEGER", "BYTES", "DIGEST"]
                    },
                    {
                        "name": "linearizeRead",
                        "in": "query",
                        "description": "Force reads to be linearized for server namespaces that support strong consistency mode.",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-example": false
                    },
                    {
                        "name": "namespace",
                        "in": "path",
                        "description": "Namespace for the record; equivalent to database name.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "recordExistsAction",
                        "in": "query",
                        "description": "How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods.",
                        "required": false,
                        "type": "string",
                        "enum": ["UPDATE", "UPDATE_ONLY", "REPLACE", "REPLACE_ONLY", "CREATE_ONLY"]
                    },
                    {
                        "name": "replica",
                        "in": "query",
                        "description": "Replica algorithm used to determine the target node for a single record command.",
                        "required": false,
                        "type": "string",
                        "default": "SEQUENCE",
                        "enum": ["MASTER", "MASTER_PROLES", "SEQUENCE", "RANDOM"]
                    },
                    {
                        "name": "sendKey",
                        "in": "query",
                        "description": "Send user defined key in addition to hash digest on both reads and writes.",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-example": false
                    }
                ],
                "responses": {
                    "204": { "description": "No Content" },
                    "400": {
                        "description": "Invalid parameters or request",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "403": {
                        "description": "Not authorized to access the resource",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "404": {
                        "description": "Record does not exist.",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "409": {
                        "description": "Generation mismatch for operation",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "500": {
                        "description": "The Rest Client encountered an error processing the request",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "security": [{ "jwt": [] }],
                "tags": ["Key Value Operations"],
                "summary": "Delete the specified record.",
                "operationId": "deleteRecordNamespaceKey",
                "produces": ["application/json", "application/msgpack"],
                "parameters": [
                    {
                        "name": "commitLevel",
                        "in": "query",
                        "description": "Desired consistency guarantee when committing a transaction on the server.",
                        "required": false,
                        "type": "string",
                        "default": "COMMIT_ALL",
                        "enum": ["COMMIT_ALL", "COMMIT_MASTER"]
                    },
                    {
                        "name": "consistencyLevel",
                        "in": "query",
                        "description": "How replicas should be consulted in a read operation to provide the desired consistency guarantee.",
                        "required": false,
                        "type": "string",
                        "default": "CONSISTENCY_ONE",
                        "enum": ["CONSISTENCY_ONE", "CONSISTENCY_ALL"]
                    },
                    {
                        "name": "durableDelete",
                        "in": "query",
                        "description": "If the transaction results in a record deletion, leave a tombstone for the record.",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-example": false
                    },
                    {
                        "name": "expiration",
                        "in": "query",
                        "description": "Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "generation",
                        "in": "query",
                        "description": "Expected generation. Generation is the number of times a record has been modified (including creation) on the server.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "generationPolicy",
                        "in": "query",
                        "description": "Qualify how to handle record writes based on record generation.",
                        "required": false,
                        "type": "string",
                        "default": "NONE",
                        "enum": ["NONE", "EXPECT_GEN_EQUAL", "EXPECT_GEN_GT"]
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Userkey for the record.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "keytype",
                        "in": "query",
                        "description": "The Type of the userKey.",
                        "required": false,
                        "type": "string",
                        "default": "STRING",
                        "enum": ["STRING", "INTEGER", "BYTES", "DIGEST"]
                    },
                    {
                        "name": "linearizeRead",
                        "in": "query",
                        "description": "Force reads to be linearized for server namespaces that support strong consistency mode.",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-example": false
                    },
                    {
                        "name": "namespace",
                        "in": "path",
                        "description": "Namespace for the record; equivalent to database name.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "recordExistsAction",
                        "in": "query",
                        "description": "How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods.",
                        "required": false,
                        "type": "string",
                        "enum": ["UPDATE", "UPDATE_ONLY", "REPLACE", "REPLACE_ONLY", "CREATE_ONLY"]
                    },
                    {
                        "name": "replica",
                        "in": "query",
                        "description": "Replica algorithm used to determine the target node for a single record command.",
                        "required": false,
                        "type": "string",
                        "default": "SEQUENCE",
                        "enum": ["MASTER", "MASTER_PROLES", "SEQUENCE", "RANDOM"]
                    },
                    {
                        "name": "sendKey",
                        "in": "query",
                        "description": "Send user defined key in addition to hash digest on both reads and writes.",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-example": false
                    }
                ],
                "responses": {
                    "204": { "description": "No Content" },
                    "400": {
                        "description": "Invalid parameters or request",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "403": {
                        "description": "Not authorized to access the resource",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "404": {
                        "description": "Record not found.",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "409": {
                        "description": "Generation mismatch for operation",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "500": {
                        "description": "The Rest Client encountered an error processing the request",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    }
                },
                "deprecated": false
            },
            "patch": {
                "tags": ["Key Value Operations"],
                "summary": "Merge the provided bins into the record.",
                "operationId": "updateRecordNamespaceKey",
                "consumes": ["application/json", "application/msgpack"],
                "produces": ["application/json", "application/msgpack"],
                "parameters": [
                    {
                        "in": "body",
                        "name": "bins",
                        "description": "Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack\nexample: {\"bin1\":5, \"bin2\":\"hello\", \"bin3\": [1,2,3], \"bin4\": {\"one\": 1}}",
                        "required": true,
                        "schema": { "type": "object" }
                    },
                    {
                        "name": "commitLevel",
                        "in": "query",
                        "description": "Desired consistency guarantee when committing a transaction on the server.",
                        "required": false,
                        "type": "string",
                        "default": "COMMIT_ALL",
                        "enum": ["COMMIT_ALL", "COMMIT_MASTER"]
                    },
                    {
                        "name": "consistencyLevel",
                        "in": "query",
                        "description": "How replicas should be consulted in a read operation to provide the desired consistency guarantee.",
                        "required": false,
                        "type": "string",
                        "default": "CONSISTENCY_ONE",
                        "enum": ["CONSISTENCY_ONE", "CONSISTENCY_ALL"]
                    },
                    {
                        "name": "durableDelete",
                        "in": "query",
                        "description": "If the transaction results in a record deletion, leave a tombstone for the record.",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-example": false
                    },
                    {
                        "name": "expiration",
                        "in": "query",
                        "description": "Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "generation",
                        "in": "query",
                        "description": "Expected generation. Generation is the number of times a record has been modified (including creation) on the server.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "generationPolicy",
                        "in": "query",
                        "description": "Qualify how to handle record writes based on record generation.",
                        "required": false,
                        "type": "string",
                        "default": "NONE",
                        "enum": ["NONE", "EXPECT_GEN_EQUAL", "EXPECT_GEN_GT"]
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Userkey for the record.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "keytype",
                        "in": "query",
                        "description": "The Type of the userKey.",
                        "required": false,
                        "type": "string",
                        "default": "STRING",
                        "enum": ["STRING", "INTEGER", "BYTES", "DIGEST"]
                    },
                    {
                        "name": "linearizeRead",
                        "in": "query",
                        "description": "Force reads to be linearized for server namespaces that support strong consistency mode.",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-example": false
                    },
                    {
                        "name": "namespace",
                        "in": "path",
                        "description": "Namespace for the record; equivalent to database name.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "recordExistsAction",
                        "in": "query",
                        "description": "How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods.",
                        "required": false,
                        "type": "string",
                        "enum": ["UPDATE", "UPDATE_ONLY", "REPLACE", "REPLACE_ONLY", "CREATE_ONLY"]
                    },
                    {
                        "name": "replica",
                        "in": "query",
                        "description": "Replica algorithm used to determine the target node for a single record command.",
                        "required": false,
                        "type": "string",
                        "default": "SEQUENCE",
                        "enum": ["MASTER", "MASTER_PROLES", "SEQUENCE", "RANDOM"]
                    },
                    {
                        "name": "sendKey",
                        "in": "query",
                        "description": "Send user defined key in addition to hash digest on both reads and writes.",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-example": false
                    }
                ],
                "responses": {
                    "204": { "description": "No Content" },
                    "400": {
                        "description": "Invalid parameters or request",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "403": {
                        "description": "Not authorized to access the resource",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "404": {
                        "description": "Record does not exist.",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "409": {
                        "description": "Generation mismatch for operation",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "500": {
                        "description": "The Rest Client encountered an error processing the request",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    }
                },
                "deprecated": false
            }
        },
        "/v1/kvs/{namespace}/{set}/{key}": {
            "get": {
                "security": [{ "jwt": [] }],
                "tags": ["Key Value Operations"],
                "summary": "Return the metadata and bins for a record.",
                "operationId": "getRecordNamespaceSetKey",
                "produces": ["application/json", "application/msgpack"],
                "parameters": [
                    {
                        "name": "bins",
                        "in": "query",
                        "description": "Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned.",
                        "required": false,
                        "type": "array",
                        "items": { "type": "string" },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "consistencyLevel",
                        "in": "query",
                        "description": "How replicas should be consulted in a read operation to provide the desired consistency guarantee.",
                        "required": false,
                        "type": "string",
                        "default": "CONSISTENCY_ONE",
                        "enum": ["CONSISTENCY_ONE", "CONSISTENCY_ALL"]
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Userkey for the record.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "keytype",
                        "in": "query",
                        "description": "The Type of the userKey.",
                        "required": false,
                        "type": "string",
                        "default": "STRING",
                        "enum": ["STRING", "INTEGER", "BYTES", "DIGEST"]
                    },
                    {
                        "name": "linearizeRead",
                        "in": "query",
                        "description": "Force reads to be linearized for server namespaces that support strong consistency mode.",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-example": false
                    },
                    {
                        "name": "namespace",
                        "in": "path",
                        "description": "Namespace for the record; equivalent to database name.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "replica",
                        "in": "query",
                        "description": "Replica algorithm used to determine the target node for a single record command.",
                        "required": false,
                        "type": "string",
                        "default": "SEQUENCE",
                        "enum": ["MASTER", "MASTER_PROLES", "SEQUENCE", "RANDOM"]
                    },
                    {
                        "name": "sendKey",
                        "in": "query",
                        "description": "Send user defined key in addition to hash digest on both reads and writes.",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-example": false
                    },
                    {
                        "name": "set",
                        "in": "path",
                        "description": "Set for the record; equivalent to database table.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": { "description": "OK", "schema": { "$ref": "#/definitions/Record" } },
                    "400": {
                        "description": "Invalid parameters or request",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "403": {
                        "description": "Not authorized to access the resource",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "404": {
                        "description": "Record not found.",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "500": {
                        "description": "The Rest Client encountered an error processing the request",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    }
                },
                "deprecated": false
            },
            "head": {
                "security": [{ "jwt": [] }],
                "tags": ["Key Value Operations"],
                "summary": "Check if a record exists",
                "operationId": "recordExistsNamespaceSetKey",
                "consumes": ["application/json"],
                "produces": ["application/json", "application/msgpack"],
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Userkey for the record.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "keytype",
                        "in": "query",
                        "description": "The Type of the userKey.",
                        "required": false,
                        "type": "string",
                        "default": "STRING",
                        "allowEmptyValue": false,
                        "enum": ["STRING", "INTEGER", "BYTES", "DIGEST"]
                    },
                    {
                        "name": "namespace",
                        "in": "path",
                        "description": "Namespace for the record; equivalent to database name.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "set",
                        "in": "path",
                        "description": "Set for the record; equivalent to database table.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": { "description": "OK" },
                    "404": { "description": "Record does not exist." },
                    "500": {
                        "description": "The Rest Client encountered an error processing the request",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    }
                },
                "deprecated": false
            },
            "post": {
                "security": [{ "jwt": [] }],
                "tags": ["Key Value Operations"],
                "summary": "Create a new record with the provided bins into the record.",
                "operationId": "createRecordNamespaceSetKey",
                "consumes": ["application/json", "application/msgpack"],
                "produces": ["application/json", "application/msgpack"],
                "parameters": [
                    {
                        "in": "body",
                        "name": "bins",
                        "description": "Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack\nexample: {\"bin1\":5, \"bin2\":\"hello\", \"bin3\": [1,2,3], \"bin4\": {\"one\": 1}}",
                        "required": true,
                        "schema": { "type": "object" }
                    },
                    {
                        "name": "commitLevel",
                        "in": "query",
                        "description": "Desired consistency guarantee when committing a transaction on the server.",
                        "required": false,
                        "type": "string",
                        "default": "COMMIT_ALL",
                        "enum": ["COMMIT_ALL", "COMMIT_MASTER"]
                    },
                    {
                        "name": "consistencyLevel",
                        "in": "query",
                        "description": "How replicas should be consulted in a read operation to provide the desired consistency guarantee.",
                        "required": false,
                        "type": "string",
                        "default": "CONSISTENCY_ONE",
                        "enum": ["CONSISTENCY_ONE", "CONSISTENCY_ALL"]
                    },
                    {
                        "name": "durableDelete",
                        "in": "query",
                        "description": "If the transaction results in a record deletion, leave a tombstone for the record.",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-example": false
                    },
                    {
                        "name": "expiration",
                        "in": "query",
                        "description": "Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "generation",
                        "in": "query",
                        "description": "Expected generation. Generation is the number of times a record has been modified (including creation) on the server.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "generationPolicy",
                        "in": "query",
                        "description": "Qualify how to handle record writes based on record generation.",
                        "required": false,
                        "type": "string",
                        "default": "NONE",
                        "enum": ["NONE", "EXPECT_GEN_EQUAL", "EXPECT_GEN_GT"]
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Userkey for the record.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "keytype",
                        "in": "query",
                        "description": "The Type of the userKey.",
                        "required": false,
                        "type": "string",
                        "default": "STRING",
                        "enum": ["STRING", "INTEGER", "BYTES", "DIGEST"]
                    },
                    {
                        "name": "linearizeRead",
                        "in": "query",
                        "description": "Force reads to be linearized for server namespaces that support strong consistency mode.",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-example": false
                    },
                    {
                        "name": "namespace",
                        "in": "path",
                        "description": "Namespace for the record; equivalent to database name.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "recordExistsAction",
                        "in": "query",
                        "description": "How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods.",
                        "required": false,
                        "type": "string",
                        "enum": ["UPDATE", "UPDATE_ONLY", "REPLACE", "REPLACE_ONLY", "CREATE_ONLY"]
                    },
                    {
                        "name": "replica",
                        "in": "query",
                        "description": "Replica algorithm used to determine the target node for a single record command.",
                        "required": false,
                        "type": "string",
                        "default": "SEQUENCE",
                        "enum": ["MASTER", "MASTER_PROLES", "SEQUENCE", "RANDOM"]
                    },
                    {
                        "name": "sendKey",
                        "in": "query",
                        "description": "Send user defined key in addition to hash digest on both reads and writes.",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-example": false
                    },
                    {
                        "name": "set",
                        "in": "path",
                        "description": "Set for the record; equivalent to database table.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": { "description": "Created" },
                    "400": {
                        "description": "Invalid parameters or request",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "403": {
                        "description": "Not authorized to access the resource",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "404": {
                        "description": "Namespace does not exist",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "409": {
                        "description": "Record Already exists",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "500": {
                        "description": "The Rest Client encountered an error processing the request",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    }
                },
                "deprecated": false
            },
            "put": {
                "security": [{ "jwt": [] }],
                "tags": ["Key Value Operations"],
                "summary": "Replace the bins of the specified record.",
                "operationId": "replaceRecordNamespaceSetKey",
                "consumes": ["application/json", "application/msgpack"],
                "produces": ["application/json", "application/msgpack"],
                "parameters": [
                    {
                        "in": "body",
                        "name": "bins",
                        "description": "Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack\nexample: {\"bin1\":5, \"bin2\":\"hello\", \"bin3\": [1,2,3], \"bin4\": {\"one\": 1}}",
                        "required": true,
                        "schema": { "type": "object" }
                    },
                    {
                        "name": "commitLevel",
                        "in": "query",
                        "description": "Desired consistency guarantee when committing a transaction on the server.",
                        "required": false,
                        "type": "string",
                        "default": "COMMIT_ALL",
                        "enum": ["COMMIT_ALL", "COMMIT_MASTER"]
                    },
                    {
                        "name": "consistencyLevel",
                        "in": "query",
                        "description": "How replicas should be consulted in a read operation to provide the desired consistency guarantee.",
                        "required": false,
                        "type": "string",
                        "default": "CONSISTENCY_ONE",
                        "enum": ["CONSISTENCY_ONE", "CONSISTENCY_ALL"]
                    },
                    {
                        "name": "durableDelete",
                        "in": "query",
                        "description": "If the transaction results in a record deletion, leave a tombstone for the record.",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-example": false
                    },
                    {
                        "name": "expiration",
                        "in": "query",
                        "description": "Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "generation",
                        "in": "query",
                        "description": "Expected generation. Generation is the number of times a record has been modified (including creation) on the server.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "generationPolicy",
                        "in": "query",
                        "description": "Qualify how to handle record writes based on record generation.",
                        "required": false,
                        "type": "string",
                        "default": "NONE",
                        "enum": ["NONE", "EXPECT_GEN_EQUAL", "EXPECT_GEN_GT"]
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Userkey for the record.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "keytype",
                        "in": "query",
                        "description": "The Type of the userKey.",
                        "required": false,
                        "type": "string",
                        "default": "STRING",
                        "enum": ["STRING", "INTEGER", "BYTES", "DIGEST"]
                    },
                    {
                        "name": "linearizeRead",
                        "in": "query",
                        "description": "Force reads to be linearized for server namespaces that support strong consistency mode.",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-example": false
                    },
                    {
                        "name": "namespace",
                        "in": "path",
                        "description": "Namespace for the record; equivalent to database name.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "recordExistsAction",
                        "in": "query",
                        "description": "How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods.",
                        "required": false,
                        "type": "string",
                        "enum": ["UPDATE", "UPDATE_ONLY", "REPLACE", "REPLACE_ONLY", "CREATE_ONLY"]
                    },
                    {
                        "name": "replica",
                        "in": "query",
                        "description": "Replica algorithm used to determine the target node for a single record command.",
                        "required": false,
                        "type": "string",
                        "default": "SEQUENCE",
                        "enum": ["MASTER", "MASTER_PROLES", "SEQUENCE", "RANDOM"]
                    },
                    {
                        "name": "sendKey",
                        "in": "query",
                        "description": "Send user defined key in addition to hash digest on both reads and writes.",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-example": false
                    },
                    {
                        "name": "set",
                        "in": "path",
                        "description": "Set for the record; equivalent to database table.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": { "description": "No Content" },
                    "400": {
                        "description": "Invalid parameters or request",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "403": {
                        "description": "Not authorized to access the resource",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "404": {
                        "description": "Record does not exist.",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "409": {
                        "description": "Generation mismatch for operation",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "500": {
                        "description": "The Rest Client encountered an error processing the request",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "security": [{ "jwt": [] }],
                "tags": ["Key Value Operations"],
                "summary": "Delete the specified record.",
                "operationId": "deleteRecordNamespaceSetKey",
                "produces": ["application/json", "application/msgpack"],
                "parameters": [
                    {
                        "name": "commitLevel",
                        "in": "query",
                        "description": "Desired consistency guarantee when committing a transaction on the server.",
                        "required": false,
                        "type": "string",
                        "default": "COMMIT_ALL",
                        "enum": ["COMMIT_ALL", "COMMIT_MASTER"]
                    },
                    {
                        "name": "consistencyLevel",
                        "in": "query",
                        "description": "How replicas should be consulted in a read operation to provide the desired consistency guarantee.",
                        "required": false,
                        "type": "string",
                        "default": "CONSISTENCY_ONE",
                        "enum": ["CONSISTENCY_ONE", "CONSISTENCY_ALL"]
                    },
                    {
                        "name": "durableDelete",
                        "in": "query",
                        "description": "If the transaction results in a record deletion, leave a tombstone for the record.",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-example": false
                    },
                    {
                        "name": "expiration",
                        "in": "query",
                        "description": "Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "generation",
                        "in": "query",
                        "description": "Expected generation. Generation is the number of times a record has been modified (including creation) on the server.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "generationPolicy",
                        "in": "query",
                        "description": "Qualify how to handle record writes based on record generation.",
                        "required": false,
                        "type": "string",
                        "default": "NONE",
                        "enum": ["NONE", "EXPECT_GEN_EQUAL", "EXPECT_GEN_GT"]
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Userkey for the record.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "keytype",
                        "in": "query",
                        "description": "The Type of the userKey.",
                        "required": false,
                        "type": "string",
                        "default": "STRING",
                        "enum": ["STRING", "INTEGER", "BYTES", "DIGEST"]
                    },
                    {
                        "name": "linearizeRead",
                        "in": "query",
                        "description": "Force reads to be linearized for server namespaces that support strong consistency mode.",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-example": false
                    },
                    {
                        "name": "namespace",
                        "in": "path",
                        "description": "Namespace for the record; equivalent to database name.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "recordExistsAction",
                        "in": "query",
                        "description": "How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods.",
                        "required": false,
                        "type": "string",
                        "enum": ["UPDATE", "UPDATE_ONLY", "REPLACE", "REPLACE_ONLY", "CREATE_ONLY"]
                    },
                    {
                        "name": "replica",
                        "in": "query",
                        "description": "Replica algorithm used to determine the target node for a single record command.",
                        "required": false,
                        "type": "string",
                        "default": "SEQUENCE",
                        "enum": ["MASTER", "MASTER_PROLES", "SEQUENCE", "RANDOM"]
                    },
                    {
                        "name": "sendKey",
                        "in": "query",
                        "description": "Send user defined key in addition to hash digest on both reads and writes.",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-example": false
                    },
                    {
                        "name": "set",
                        "in": "path",
                        "description": "Set for the record; equivalent to database table.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": { "description": "No Content" },
                    "400": {
                        "description": "Invalid parameters or request",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "403": {
                        "description": "Not authorized to access the resource",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "404": {
                        "description": "Record not found.",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "409": {
                        "description": "Generation mismatch for operation",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "500": {
                        "description": "The Rest Client encountered an error processing the request",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    }
                },
                "deprecated": false
            },
            "patch": {
                "tags": ["Key Value Operations"],
                "summary": "Merge the provided bins into the record.",
                "operationId": "updateRecordNamespaceSetKey",
                "consumes": ["application/json", "application/msgpack"],
                "produces": ["application/json", "application/msgpack"],
                "parameters": [
                    {
                        "in": "body",
                        "name": "bins",
                        "description": "Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack\nexample: {\"bin1\":5, \"bin2\":\"hello\", \"bin3\": [1,2,3], \"bin4\": {\"one\": 1}}",
                        "required": true,
                        "schema": { "type": "object" }
                    },
                    {
                        "name": "commitLevel",
                        "in": "query",
                        "description": "Desired consistency guarantee when committing a transaction on the server.",
                        "required": false,
                        "type": "string",
                        "default": "COMMIT_ALL",
                        "enum": ["COMMIT_ALL", "COMMIT_MASTER"]
                    },
                    {
                        "name": "consistencyLevel",
                        "in": "query",
                        "description": "How replicas should be consulted in a read operation to provide the desired consistency guarantee.",
                        "required": false,
                        "type": "string",
                        "default": "CONSISTENCY_ONE",
                        "enum": ["CONSISTENCY_ONE", "CONSISTENCY_ALL"]
                    },
                    {
                        "name": "durableDelete",
                        "in": "query",
                        "description": "If the transaction results in a record deletion, leave a tombstone for the record.",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-example": false
                    },
                    {
                        "name": "expiration",
                        "in": "query",
                        "description": "Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "generation",
                        "in": "query",
                        "description": "Expected generation. Generation is the number of times a record has been modified (including creation) on the server.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "generationPolicy",
                        "in": "query",
                        "description": "Qualify how to handle record writes based on record generation.",
                        "required": false,
                        "type": "string",
                        "default": "NONE",
                        "enum": ["NONE", "EXPECT_GEN_EQUAL", "EXPECT_GEN_GT"]
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Userkey for the record.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "keytype",
                        "in": "query",
                        "description": "The Type of the userKey.",
                        "required": false,
                        "type": "string",
                        "default": "STRING",
                        "enum": ["STRING", "INTEGER", "BYTES", "DIGEST"]
                    },
                    {
                        "name": "linearizeRead",
                        "in": "query",
                        "description": "Force reads to be linearized for server namespaces that support strong consistency mode.",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-example": false
                    },
                    {
                        "name": "namespace",
                        "in": "path",
                        "description": "Namespace for the record; equivalent to database name.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "recordExistsAction",
                        "in": "query",
                        "description": "How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods.",
                        "required": false,
                        "type": "string",
                        "enum": ["UPDATE", "UPDATE_ONLY", "REPLACE", "REPLACE_ONLY", "CREATE_ONLY"]
                    },
                    {
                        "name": "replica",
                        "in": "query",
                        "description": "Replica algorithm used to determine the target node for a single record command.",
                        "required": false,
                        "type": "string",
                        "default": "SEQUENCE",
                        "enum": ["MASTER", "MASTER_PROLES", "SEQUENCE", "RANDOM"]
                    },
                    {
                        "name": "sendKey",
                        "in": "query",
                        "description": "Send user defined key in addition to hash digest on both reads and writes.",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-example": false
                    },
                    {
                        "name": "set",
                        "in": "path",
                        "description": "Set for the record; equivalent to database table.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": { "description": "No Content" },
                    "400": {
                        "description": "Invalid parameters or request",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "403": {
                        "description": "Not authorized to access the resource",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "404": {
                        "description": "Record does not exist.",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "409": {
                        "description": "Generation mismatch for operation",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "500": {
                        "description": "The Rest Client encountered an error processing the request",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    }
                },
                "deprecated": false
            }
        },
        "/v1/operate/{namespace}/{key}": {
            "post": {
                "security": [{ "jwt": [] }],
                "tags": ["Operate operations"],
                "summary": "Perform multiple operations atomically on the specified record.",
                "operationId": "operateNamespaceKey",
                "consumes": ["application/json", "application/msgpack"],
                "produces": ["application/json", "application/msgpack"],
                "parameters": [
                    {
                        "name": "commitLevel",
                        "in": "query",
                        "description": "Desired consistency guarantee when committing a transaction on the server.",
                        "required": false,
                        "type": "string",
                        "default": "COMMIT_ALL",
                        "enum": ["COMMIT_ALL", "COMMIT_MASTER"]
                    },
                    {
                        "name": "consistencyLevel",
                        "in": "query",
                        "description": "How replicas should be consulted in a read operation to provide the desired consistency guarantee.",
                        "required": false,
                        "type": "string",
                        "default": "CONSISTENCY_ONE",
                        "enum": ["CONSISTENCY_ONE", "CONSISTENCY_ALL"]
                    },
                    {
                        "name": "durableDelete",
                        "in": "query",
                        "description": "If the transaction results in a record deletion, leave a tombstone for the record.",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-example": false
                    },
                    {
                        "name": "expiration",
                        "in": "query",
                        "description": "Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "generation",
                        "in": "query",
                        "description": "Expected generation. Generation is the number of times a record has been modified (including creation) on the server.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "generationPolicy",
                        "in": "query",
                        "description": "Qualify how to handle record writes based on record generation.",
                        "required": false,
                        "type": "string",
                        "default": "NONE",
                        "enum": ["NONE", "EXPECT_GEN_EQUAL", "EXPECT_GEN_GT"]
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Userkey for the record.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "keytype",
                        "in": "query",
                        "description": "The Type of the userKey.",
                        "required": false,
                        "type": "string",
                        "default": "STRING",
                        "enum": ["STRING", "INTEGER", "BYTES", "DIGEST"]
                    },
                    {
                        "name": "linearizeRead",
                        "in": "query",
                        "description": "Force reads to be linearized for server namespaces that support strong consistency mode.",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-example": false
                    },
                    {
                        "name": "namespace",
                        "in": "path",
                        "description": "Namespace for the record; equivalent to database name.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "operations",
                        "description": "An array of operation objects specifying the operations to perform on the record",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": { "$ref": "#/definitions/Operation" }
                        }
                    },
                    {
                        "name": "recordExistsAction",
                        "in": "query",
                        "description": "How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods.",
                        "required": false,
                        "type": "string",
                        "enum": ["UPDATE", "UPDATE_ONLY", "REPLACE", "REPLACE_ONLY", "CREATE_ONLY"]
                    },
                    {
                        "name": "replica",
                        "in": "query",
                        "description": "Replica algorithm used to determine the target node for a single record command.",
                        "required": false,
                        "type": "string",
                        "default": "SEQUENCE",
                        "enum": ["MASTER", "MASTER_PROLES", "SEQUENCE", "RANDOM"]
                    },
                    {
                        "name": "sendKey",
                        "in": "query",
                        "description": "Send user defined key in addition to hash digest on both reads and writes.",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-example": false
                    }
                ],
                "responses": {
                    "200": { "description": "OK", "schema": { "$ref": "#/definitions/Record" } },
                    "400": {
                        "description": "Invalid parameters or request",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "403": {
                        "description": "Not authorized to access the resource",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "404": {
                        "description": "Namespace or record does not exist",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "409": {
                        "description": "Generation conflict",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "500": {
                        "description": "The Rest Client encountered an error processing the request",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    }
                },
                "deprecated": false
            }
        },
        "/v1/operate/{namespace}/{set}/{key}": {
            "post": {
                "tags": ["Operate operations"],
                "summary": "Perform multiple operations atomically on the specified record.",
                "operationId": "operateNamespaceSetKey",
                "consumes": ["application/json", "application/msgpack"],
                "produces": ["application/json", "application/msgpack"],
                "parameters": [
                    {
                        "name": "commitLevel",
                        "in": "query",
                        "description": "Desired consistency guarantee when committing a transaction on the server.",
                        "required": false,
                        "type": "string",
                        "default": "COMMIT_ALL",
                        "enum": ["COMMIT_ALL", "COMMIT_MASTER"]
                    },
                    {
                        "name": "consistencyLevel",
                        "in": "query",
                        "description": "How replicas should be consulted in a read operation to provide the desired consistency guarantee.",
                        "required": false,
                        "type": "string",
                        "default": "CONSISTENCY_ONE",
                        "enum": ["CONSISTENCY_ONE", "CONSISTENCY_ALL"]
                    },
                    {
                        "name": "durableDelete",
                        "in": "query",
                        "description": "If the transaction results in a record deletion, leave a tombstone for the record.",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-example": false
                    },
                    {
                        "name": "expiration",
                        "in": "query",
                        "description": "Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "generation",
                        "in": "query",
                        "description": "Expected generation. Generation is the number of times a record has been modified (including creation) on the server.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "generationPolicy",
                        "in": "query",
                        "description": "Qualify how to handle record writes based on record generation.",
                        "required": false,
                        "type": "string",
                        "default": "NONE",
                        "enum": ["NONE", "EXPECT_GEN_EQUAL", "EXPECT_GEN_GT"]
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Userkey for the record.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "keytype",
                        "in": "query",
                        "description": "The Type of the userKey.",
                        "required": false,
                        "type": "string",
                        "default": "STRING",
                        "enum": ["STRING", "INTEGER", "BYTES", "DIGEST"]
                    },
                    {
                        "name": "linearizeRead",
                        "in": "query",
                        "description": "Force reads to be linearized for server namespaces that support strong consistency mode.",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-example": false
                    },
                    {
                        "name": "namespace",
                        "in": "path",
                        "description": "Namespace for the record; equivalent to database name.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "operations",
                        "description": "An array of operation objects specifying the operations to perform on the record",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": { "$ref": "#/definitions/Operation" }
                        }
                    },
                    {
                        "name": "recordExistsAction",
                        "in": "query",
                        "description": "How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods.",
                        "required": false,
                        "type": "string",
                        "enum": ["UPDATE", "UPDATE_ONLY", "REPLACE", "REPLACE_ONLY", "CREATE_ONLY"]
                    },
                    {
                        "name": "replica",
                        "in": "query",
                        "description": "Replica algorithm used to determine the target node for a single record command.",
                        "required": false,
                        "type": "string",
                        "default": "SEQUENCE",
                        "enum": ["MASTER", "MASTER_PROLES", "SEQUENCE", "RANDOM"]
                    },
                    {
                        "name": "sendKey",
                        "in": "query",
                        "description": "Send user defined key in addition to hash digest on both reads and writes.",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-example": false
                    },
                    {
                        "name": "set",
                        "in": "path",
                        "description": "Set for the record; equivalent to database table.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": { "description": "OK", "schema": { "$ref": "#/definitions/Record" } },
                    "400": {
                        "description": "Invalid parameters or request",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "403": {
                        "description": "Not authorized to access the resource",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "404": {
                        "description": "Namespace or record does not exist",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "409": {
                        "description": "Generation conflict",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    },
                    "500": {
                        "description": "The Rest Client encountered an error processing the request",
                        "schema": { "$ref": "#/definitions/RestClientError" }
                    }
                },
                "deprecated": false,
                "schemes": ["http", "https"],
                "security": [{ "jwt": [] }]
            }
        }
   },
    "definitions": {
        "BatchRead": {
            "type": "object",
            "properties": {
                "binNames": { "type": "array", "items": { "type": "string" } },
                "key": { "$ref": "#/definitions/Key" },
                "readAllBins": { "type": "boolean" },
                "record": { "$ref": "#/definitions/Record" }
            },
            "title": "BatchRead"
        },
        "BatchReadRequest": {
            "type": "object",
            "properties": {
                "binNames": {
                    "type": "array",
                    "description": "List of bins to limit the record response to.",
                    "items": { "type": "string" }
                },
                "key": { "description": "Key to retrieve a record", "$ref": "#/definitions/Key" },
                "readAllBins": {
                    "type": "boolean",
                    "description": "Whether all bins should be returned with this record"
                }
            },
            "title": "BatchReadRequest"
        },
        "Key": {
            "type": "object",
            "required": ["namespace"],
            "properties": {
                "digest": {
                    "type": "string",
                    "example": "AAAAAAAAAAAAAAAAAAAAAAAAAAA=",
                    "description": "URL safe base64 encoded key digest. Returned by the server on batch responses. May be provided by client."
                },
                "keytype": {
                    "type": "string",
                    "example": "STRING",
                    "description": "Enum describing the type of the userKey. This field is omitted in MessagePack responses.",
                    "enum": ["STRING", "INTEGER", "BYTES", "DIGEST"]
                },
                "namespace": { "type": "string", "example": "testNS" },
                "setName": { "type": "string", "example": "testSet" },
                "userKey": {
                    "type": "object",
                    "example": "userKey",
                    "description": "The user key, it may be a string, integer, or URL safe Base64 encoded bytes."
                }
            },
            "title": "Key"
        },
        "NamespaceInformation": {
            "type": "object",
            "properties": {
                "name": { "type": "string", "example": "testNS" },
                "sets": {
                    "type": "array",
                    "items": { "$ref": "#/definitions/RestClientSetInformation" }
                }
            },
            "title": "NamespaceInformation"
        },
        "Node Information": {
            "type": "object",
            "properties": { "name": { "type": "string", "example": "BB9DE9B1B270008" } },
            "title": "Node Information"
        },
        "Operation": {
            "type": "object",
            "required": ["op_values", "operation"],
            "properties": { "op_values": { "type": "object" }, "operation": { "type": "string" } },
            "title": "Operation"
        },
        "Privilege": {
            "type": "object",
            "required": ["code"],
            "properties": {
                "code": {
                    "type": "string",
                    "enum": [
                        "user-admin",
                        "sys-admin",
                        "data-admin",
                        "read",
                        "read-write",
                        "read-write-udf"
                    ]
                },
                "namespace": {
                    "type": "string",
                    "example": "testNS",
                    "description": "Namespace Scope"
                },
                "set": { "type": "string", "example": "testSet", "description": "setName Scope" }
            },
            "title": "Privilege"
        },
        "Record": {
            "type": "object",
            "properties": {
                "bins": {
                    "type": "object",
                    "example": { "bin1": "val1", "pi": "3.14" },
                    "description": "A mapping from binName to binValue"
                },
                "generation": {
                    "type": "integer",
                    "format": "int32",
                    "example": 2,
                    "description": "The generation of the record."
                },
                "ttl": {
                    "type": "integer",
                    "format": "int32",
                    "example": 1000,
                    "description": "The time to live for the record, in seconds from now."
                }
            },
            "title": "Record"
        },
        "RestClientError": {
            "type": "object",
            "properties": {
                "inDoubt": {
                    "type": "boolean",
                    "example": false,
                    "description": "A boolean specifying whether it was possible that the operation succeeded. This is only included if true."
                },
                "message": {
                    "type": "string",
                    "example": "Error Message",
                    "description": "A message describing the cause of the error."
                }
            },
            "title": "RestClientError",
            "description": "Error object returned from unsuccesful operations."
        },
        "RestClientIndex": {
            "type": "object",
            "properties": {
                "bin": {
                    "type": "string",
                    "example": "ageBin",
                    "description": "The bin which is indexed"
                },
                "collection_type": {
                    "type": "string",
                    "enum": ["DEFAULT", "LIST", "MAPKEYS", "MAPVALUES"]
                },
                "name": {
                    "type": "string",
                    "example": "ageIndex",
                    "description": "The name of the index. This must be unique per set"
                },
                "namespace": { "type": "string", "example": "testNS" },
                "set": { "type": "string", "example": "testSet" },
                "type": { "type": "string", "enum": ["NUMERIC", "STRING", "GEO2DSPHERE"] }
            },
            "title": "RestClientIndex"
        },
        "RestClientRole": {
            "type": "object",
            "properties": {
                "name": { "type": "string", "example": "customRole" },
                "privileges": { "type": "array", "items": { "$ref": "#/definitions/Privilege" } }
            },
            "title": "RestClientRole"
        },
        "RestClientSetInformation": {
            "type": "object",
            "properties": {
                "name": { "type": "string", "example": "demo" },
                "objectCount": { "type": "integer", "format": "int32", "example": 100 }
            },
            "title": "RestClientSetInformation"
        },
        "RestClientUserModel": {
            "type": "object",
            "properties": {
                "password": { "type": "string" },
                "roles": { "type": "array", "items": { "type": "string" } },
                "username": { "type": "string" }
            },
            "title": "RestClientUserModel"
        },
        "User": {
            "type": "object",
            "properties": {
                "name": { "type": "string" },
                "roles": { "type": "array", "items": { "type": "string" } }
            },
            "title": "User"
        },
        "clusterInformation": {
            "type": "object",
            "properties": {
                "namespaces": {
                    "type": "array",
                    "items": { "$ref": "#/definitions/NamespaceInformation" }
                },
                "nodes": { "type": "array", "items": { "$ref": "#/definitions/Node Information" } }
            },
            "title": "clusterInformation"
        }
    },
    
    "securityDefinitions": {
        "jwt": {
            "type": "apiKey",
            "description": "\n\n**Security Scopes**:\n  * `api:cluster`: API access to cluster resources",
            "name": "Authorization",
            "in": "header"
        }
    }
}
