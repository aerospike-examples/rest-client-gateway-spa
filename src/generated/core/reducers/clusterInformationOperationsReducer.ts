/*
 * WARNING: DO NOT EDIT THIS FILE. This file is generated by yarn gen. Any changes will be overwritten.
 */

import * as I from 'immutable';
import {
    ClusterInformationOperationsAction,
    GET_CLUSTER_INFO_SUCCESSFUL,
    GET_CLUSTER_INFO_FAILED,
    GET_CLUSTER_INFO_IN_PROGRESS,
} from '../actions/clusterInformationOperationsActions';
import { ApiState } from '../state/ApiState';
import { createTypedMap } from '../../../core/types/TypedMap';

export default function clusterInformationOperationsReducer(
    state: ApiState,
    action: ClusterInformationOperationsAction
): ApiState {
    if (state == null) {
        // No state yet. create initial
        state = createTypedMap();
    } else if (!I.Iterable.isIterable(state)) {
        // State plain object. Convert to immutable.
        state = I.fromJS(state);
    }

    switch (action.type) {
        case GET_CLUSTER_INFO_IN_PROGRESS:
            state = state.setIn(
                ['clusterInformationOperations', 'getClusterInfo', 'inProgress'],
                true
            );
            break;
        case GET_CLUSTER_INFO_SUCCESSFUL:
            {
                const payload = I.fromJS(action.payload);
                state = state.withMutations(map =>
                    map
                        .setIn(
                            ['clusterInformationOperations', 'getClusterInfo', 'inProgress'],
                            false
                        )
                        .removeIn(['clusterInformationOperations', 'getClusterInfo', 'errorValue'])
                        .setIn(
                            ['clusterInformationOperations', 'getClusterInfo', 'successValue'],
                            payload
                        )
                        .setIn(['last', 'successValue'], payload)
                        .removeIn(['last', 'errorValue'])
                );
            }
            break;
        case GET_CLUSTER_INFO_FAILED:
            {
                const payload = I.fromJS(action.payload);
                state = state.withMutations(map =>
                    map
                        .setIn(
                            ['clusterInformationOperations', 'getClusterInfo', 'inProgress'],
                            false
                        )
                        .removeIn([
                            'clusterInformationOperations',
                            'getClusterInfo',
                            'successValue',
                        ])
                        .setIn(
                            ['clusterInformationOperations', 'getClusterInfo', 'errorValue'],
                            I.fromJS(action.payload)
                        )
                        .removeIn(['last', 'successValue'])
                        .setIn(['last', 'errorValue'], payload)
                );
            }
            break;
    }

    return state;
}
