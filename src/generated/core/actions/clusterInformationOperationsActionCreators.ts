/*
 * WARNING: DO NOT EDIT THIS FILE. This file is generated by yarn gen. Any changes will be overwritten.
 */

import ExtenderFunctions, {
    ApiActionCreatorExtender,
    CallType,
} from '../helpers/ApiActionExtender';
import { RouterAction } from 'connected-react-router';
import { ThunkDispatch } from 'redux-thunk';
import * as gapi from '../api';
import { ClusterInformation, RestClientError } from '../api';
import { StoreState } from '../../../core/types/StoreState';
import {
    GetClusterInfoAction,
    getClusterInfoFailed,
    getClusterInfoInProgress,
    getClusterInfoSuccessful,
} from './clusterInformationOperationsActions';
import { xformApiResponse } from '../helpers/apiTransformers';
import { getConfiguration } from '../helpers/apiConfiguration';

const conf = getConfiguration();
const api = new gapi.ClusterInformationOperationsApi(conf, process.env.REACT_APP_API_BASE || '');

export const doGetClusterInfo = (
    onSuccess?: (successArg?: ClusterInformation) => any | void,
    onError?: (errorArg?: RestClientError) => any | void,
    extender?: ExtenderFunctions<ClusterInformation, RestClientError>
) => async (dispatch: ThunkDispatch<StoreState, void, GetClusterInfoAction | RouterAction>) => {
    const calls = new ApiActionCreatorExtender<ClusterInformation, RestClientError>(
        {
            [CallType.apiCall]: async () =>
                await xformApiResponse(
                    await api.getClusterInfo({
                        headers: { accept: 'application/json, application/msgpack' },
                    })
                ),
            [CallType.success]: dispatch,
            [CallType.error]: dispatch,
        },
        onSuccess,
        onError,
        extender
    );

    dispatch(getClusterInfoInProgress());

    try {
        const ret = await calls.apiCall();
        await calls.success([getClusterInfoSuccessful(ret)], ret);
        return ret;
    } catch (error) {
        const xformedError = await xformApiResponse(error);
        return calls.error([getClusterInfoFailed(xformedError)], xformedError);
    }
};
