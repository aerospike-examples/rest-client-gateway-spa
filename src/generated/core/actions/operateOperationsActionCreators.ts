/*
 * WARNING: DO NOT EDIT THIS FILE. This file is generated by yarn gen. Any changes will be overwritten.
 */

import ExtenderFunctions, {
    ApiActionCreatorExtender,
    CallType,
} from '../helpers/ApiActionExtender';
import { RouterAction } from 'connected-react-router';
import { ThunkDispatch } from 'redux-thunk';
import * as gapi from '../api';
import { Operation, Record, RestClientError } from '../api';
import { StoreState } from '../../../core/types/StoreState';
import {
    OperateNamespaceKeyAction,
    operateNamespaceKeyFailed,
    operateNamespaceKeyInProgress,
    operateNamespaceKeySuccessful,
    OperateNamespaceSetKeyAction,
    operateNamespaceSetKeyFailed,
    operateNamespaceSetKeyInProgress,
    operateNamespaceSetKeySuccessful,
} from './operateOperationsActions';
import { xformApiResponse } from '../helpers/apiTransformers';
import { getConfiguration } from '../helpers/apiConfiguration';

const conf = getConfiguration();
const api = new gapi.OperateOperationsApi(conf, process.env.REACT_APP_API_BASE || '');

interface DoOperateNamespaceKeyArgs {
    key: string;
    namespace: string;
    operations: Operation[];
    commitLevel?: 'COMMIT_ALL' | 'COMMIT_MASTER';
    consistencyLevel?: 'CONSISTENCY_ONE' | 'CONSISTENCY_ALL';
    durableDelete?: boolean;
    expiration?: number;
    generation?: number;
    generationPolicy?: 'NONE' | 'EXPECT_GEN_EQUAL' | 'EXPECT_GEN_GT';
    keytype?: 'STRING' | 'INTEGER' | 'BYTES' | 'DIGEST';
    linearizeRead?: boolean;
    recordExistsAction?: 'UPDATE' | 'UPDATE_ONLY' | 'REPLACE' | 'REPLACE_ONLY' | 'CREATE_ONLY';
    replica?: 'MASTER' | 'MASTER_PROLES' | 'SEQUENCE' | 'RANDOM';
    sendKey?: boolean;
    onSuccess?: (successArg?: Record) => any | void;
    onError?: (errorArg?: RestClientError) => any | void;
    extender?: ExtenderFunctions<Record, RestClientError>;
}
export const doOperateNamespaceKey = ({
    key,
    namespace,
    operations,
    commitLevel,
    consistencyLevel,
    durableDelete,
    expiration,
    generation,
    generationPolicy,
    keytype,
    linearizeRead,
    recordExistsAction,
    replica,
    sendKey,
    onSuccess,
    onError,
    extender,
}: DoOperateNamespaceKeyArgs) => async (
    dispatch: ThunkDispatch<StoreState, void, OperateNamespaceKeyAction | RouterAction>
) => {
    const calls = new ApiActionCreatorExtender<Record, RestClientError>(
        {
            [CallType.apiCall]: async () =>
                await xformApiResponse(
                    await api.operateNamespaceKey(
                        key,
                        namespace,
                        operations,
                        commitLevel,
                        consistencyLevel,
                        durableDelete,
                        expiration,
                        generation,
                        generationPolicy,
                        keytype,
                        linearizeRead,
                        recordExistsAction,
                        replica,
                        sendKey,
                        { headers: { accept: 'application/json, application/msgpack' } }
                    )
                ),
            [CallType.success]: dispatch,
            [CallType.error]: dispatch,
        },
        onSuccess,
        onError,
        extender
    );

    dispatch(operateNamespaceKeyInProgress());

    try {
        const ret = await calls.apiCall();
        await calls.success([operateNamespaceKeySuccessful(ret)], ret);
        return ret;
    } catch (error) {
        const xformedError = await xformApiResponse(error);
        return calls.error([operateNamespaceKeyFailed(xformedError)], xformedError);
    }
};

interface DoOperateNamespaceSetKeyArgs {
    key: string;
    namespace: string;
    operations: Operation[];
    set: string;
    commitLevel?: 'COMMIT_ALL' | 'COMMIT_MASTER';
    consistencyLevel?: 'CONSISTENCY_ONE' | 'CONSISTENCY_ALL';
    durableDelete?: boolean;
    expiration?: number;
    generation?: number;
    generationPolicy?: 'NONE' | 'EXPECT_GEN_EQUAL' | 'EXPECT_GEN_GT';
    keytype?: 'STRING' | 'INTEGER' | 'BYTES' | 'DIGEST';
    linearizeRead?: boolean;
    recordExistsAction?: 'UPDATE' | 'UPDATE_ONLY' | 'REPLACE' | 'REPLACE_ONLY' | 'CREATE_ONLY';
    replica?: 'MASTER' | 'MASTER_PROLES' | 'SEQUENCE' | 'RANDOM';
    sendKey?: boolean;
    onSuccess?: (successArg?: Record) => any | void;
    onError?: (errorArg?: RestClientError) => any | void;
    extender?: ExtenderFunctions<Record, RestClientError>;
}
export const doOperateNamespaceSetKey = ({
    key,
    namespace,
    operations,
    set,
    commitLevel,
    consistencyLevel,
    durableDelete,
    expiration,
    generation,
    generationPolicy,
    keytype,
    linearizeRead,
    recordExistsAction,
    replica,
    sendKey,
    onSuccess,
    onError,
    extender,
}: DoOperateNamespaceSetKeyArgs) => async (
    dispatch: ThunkDispatch<StoreState, void, OperateNamespaceSetKeyAction | RouterAction>
) => {
    const calls = new ApiActionCreatorExtender<Record, RestClientError>(
        {
            [CallType.apiCall]: async () =>
                await xformApiResponse(
                    await api.operateNamespaceSetKey(
                        key,
                        namespace,
                        operations,
                        set,
                        commitLevel,
                        consistencyLevel,
                        durableDelete,
                        expiration,
                        generation,
                        generationPolicy,
                        keytype,
                        linearizeRead,
                        recordExistsAction,
                        replica,
                        sendKey,
                        { headers: { accept: 'application/json, application/msgpack' } }
                    )
                ),
            [CallType.success]: dispatch,
            [CallType.error]: dispatch,
        },
        onSuccess,
        onError,
        extender
    );

    dispatch(operateNamespaceSetKeyInProgress());

    try {
        const ret = await calls.apiCall();
        await calls.success([operateNamespaceSetKeySuccessful(ret)], ret);
        return ret;
    } catch (error) {
        const xformedError = await xformApiResponse(error);
        return calls.error([operateNamespaceSetKeyFailed(xformedError)], xformedError);
    }
};
